{"version":3,"file":"component---src-templates-blog-post-jsx-e2615dc68becd4d7bc1d.js","mappings":";+GAWAA,EAAOC,QAsCP,SAAmBC,GACjB,OAAOC,OAAOD,GAAKE,QAAQC,EApBU,SAoByDD,QAAQE,EAAqBC,YAhC7H,IAAID,EAAsB,2GAMtBD,EAAkC,sNCVtC,EAXqB,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,IAAKM,EAAY,EAAZA,MAGrBC,EADsB,0CADfC,GAAAA,CAAU,aAAaF,EAAd,mBAAsCN,GAG5D,OACE,qBAAGS,OAAO,SAASC,KAAMH,EAAMI,IAAI,cAAnC,smBCAJ,IAoEA,EApEyB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOH,EAAKI,eACZC,EAAYL,EAAKM,KAAKC,aAAab,MACjCc,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KACZC,EAAeF,MAAAA,OAAH,EAAGA,EAAUG,KAAKC,oBAC9BC,EAAWJ,MAAAA,OAAH,EAAGA,EAAME,KAAKC,oBAE5B,OACE,gBAAC,IAAD,CAAQV,SAAUA,EAAUR,MAAOW,GACjC,gBAAC,IAAD,CACEX,MAAOS,EAAKW,YAAYpB,MACxBqB,YAAaZ,EAAKW,YAAYC,aAAeZ,EAAKa,UAEpD,+BACE,2BACE,sBACEC,MAAO,CACLC,WAAWC,EAAAA,EAAAA,IAAO,GAElBC,aAAc,IAGfjB,EAAKW,YAAYpB,OAEpB,qBACEuB,MAAK,QACAI,EAAAA,EAAAA,KAAM,KADN,IAEHC,QAAQ,QACRF,cAAcD,EAAAA,EAAAA,IAAO,MAGtBhB,EAAKW,YAAYS,OAGtB,2BAASC,wBAAyB,CAAEC,OAAQtB,EAAKuB,QACjD,gBAAC,EAAD,CAActC,IAAKc,EAASJ,KAAMJ,MAAOS,EAAKW,YAAYpB,SAG5D,2BACE,sBACEuB,MAAO,CACLK,QAAQ,OACRK,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGpB,GACC,gBAAC,EAAAqB,KAAD,CAAMC,GAAItB,EAAauB,OAAOC,KAAMnC,IAAI,QAAxC,KACKW,EAAaI,YAAYpB,QAIlC,0BACGmB,GACC,gBAAC,EAAAkB,KAAD,CAAMC,GAAInB,EAASoB,OAAOC,KAAMnC,IAAI,QACjCc,EAASC,YAAYpB,MADxB","sources":["webpack://nfabredev.com/./node_modules/encodeurl/index.js","webpack://nfabredev.com/./src/components/share-twitter.js","webpack://nfabredev.com/./src/templates/blog-post.jsx"],"sourcesContent":["/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl;\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = \"$1\\uFFFD$2\";\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl(url) {\n  return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);\n}","import React from \"react\"\nimport encodeurl from \"encodeurl\"\n\nconst ShareTwitter = ({ url, title }) => {\n  const text = encodeurl(`Just read ${title} by @nfabredev: ${url}`)\n  const twitterTweetTextUrl = \"https://twitter.com/compose/tweet?text=\"\n  const link = `${twitterTweetTextUrl}${text}`\n  return (\n    <a target=\"_blank\" href={link} rel=\"noreferrer\">\n      Discuss on Twitter\n    </a>\n  )\n}\n\nexport default ShareTwitter\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport ShareTwitter from \"../components/share-twitter\";\nimport { rhythm, scale } from \"../utils/typography\";\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n  const { previous, next } = pageContext;\n  const previousPost = previous?.node.childMarkdownRemark;\n  const nextPost = next?.node.childMarkdownRemark;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <div>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </div>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <ShareTwitter url={location.href} title={post.frontmatter.title} />\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previousPost && (\n              <Link to={previousPost.fields.slug} rel=\"prev\">\n                ← {previousPost.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {nextPost && (\n              <Link to={nextPost.fields.slug} rel=\"next\">\n                {nextPost.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`;\n"],"names":["module","exports","url","String","replace","UNMATCHED_SURROGATE_PAIR_REGEXP","ENCODE_CHARS_REGEXP","encodeURI","title","link","encodeurl","target","href","rel","data","pageContext","location","post","markdownRemark","siteTitle","site","siteMetadata","previous","next","previousPost","node","childMarkdownRemark","nextPost","frontmatter","description","excerpt","style","marginTop","rhythm","marginBottom","scale","display","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug"],"sourceRoot":""}